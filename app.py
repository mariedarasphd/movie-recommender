# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17fkPzTXRWPzrXjSozYYqzRds_li29CUG
"""

import streamlit as st
import pandas as pd
from efficient_apriori import apriori
from st_aggrid import AgGrid, GridOptionsBuilder
from io import StringIO
import requests
import pickle

# --------------------------
# Tiffany Blue Theme
# --------------------------
st.markdown("""
    <style>
    .stApp {
        background-color: #E0F7FA;
        color: #0ABAB5;
    }
    h1, h2, h3, h4 {
        color: #0ABAB5;
    }
    .stButton>button {
        background-color: #0ABAB5;
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

# --------------------------
# Logo
# --------------------------
st.image("https://raw.githubusercontent.com/mariedarasphd/movie-recommender/main/mariedaraslogo.png", width=150)
st.title("ðŸŽ¬ Golden Age Movie Recommender")

# --------------------------
# Load Data
# --------------------------
def load_data():
    movies_url = 'https://raw.githubusercontent.com/mariedarasphd/movie-recommender/main/movies.csv'
    ratings_url = 'https://raw.githubusercontent.com/mariedarasphd/movie-recommender/main/ratings.csv'

    movies_csv = requests.get(movies_url).text
    ratings_csv = requests.get(ratings_url).text

    movies = pd.read_csv(StringIO(movies_csv))
    ratings = pd.read_csv(StringIO(ratings_csv))

    df = pd.merge(movies, ratings, on='movieId', how='outer')
    df[['Movie', 'Year']] = df['title'].str.extract(r'(.+?)\s*\((\d{4})\)')
    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')
    df_clean = df.dropna(subset=['userId','rating','Year'])

    golden_age = df_clean[(df_clean['Year'] >= 1930) & (df_clean['Year'] <= 1969)]

    top_movies = golden_age['movieId'].value_counts().nlargest(500).index
    filtered_data = golden_age[golden_age['movieId'].isin(top_movies)]

    filtered_data = filtered_data[~filtered_data['Movie'].str.contains('Disney', na=False)]
    filtered_data = filtered_data[~filtered_data['genres'].str.contains("Childre|Family", na=False)]

    transactions = filtered_data.groupby('userId')['movieId'].apply(list).tolist()
    movie_dict = movies.set_index('movieId')['title'].to_dict()

    return transactions, movie_dict

transactions, movie_dict = load_data()

# --------------------------
# Sidebar Inputs
# --------------------------
min_support = st.sidebar.slider("Minimum support (fraction)", 0.01, 0.1, 0.01, 0.01)
min_confidence = st.sidebar.slider("Minimum confidence", 0.5, 1.0, 0.7, 0.05)

# Dropdown for clickable movie selection
all_movies = sorted(set(movie_dict.values()))
selected_movie = st.sidebar.selectbox("Select a movie to get recommendations", all_movies)

# --------------------------
# Run Apriori (or load precomputed rules)
# --------------------------
# Uncomment below to use precomputed rules:
# with open("rules.pkl", "rb") as f:
#     rules = pickle.load(f)

# --------------------------
# Load precomputed Apriori rules
# --------------------------
import pickle

with open("rules.pkl", "rb") as f:
    rules = pickle.load(f)

# --------------------------
# Build Recommendation Table
# --------------------------
recommendations = []
for rule in rules:
    lhs_titles = [movie_dict[i] for i in rule.lhs]
    rhs_titles = [movie_dict[i] for i in rule.rhs]
    recommendations.append({
        "If you like": ", ".join(lhs_titles),
        "You might like": ", ".join(rhs_titles),
        "Confidence": round(rule.confidence, 2),
        "Lift": round(rule.lift, 2)
    })

rec_df = pd.DataFrame(recommendations)

# Filter by selected movie
if selected_movie:
    rec_df = rec_df[rec_df["If you like"].str.contains(selected_movie, case=False, na=False)]

st.subheader(f"Recommendations for: {selected_movie}")

# --------------------------
# Display Interactive Table
# --------------------------
gb = GridOptionsBuilder.from_dataframe(rec_df)
gb.configure_pagination(paginationAutoPageSize=True)
gb.configure_side_bar()
gb.configure_default_column(editable=False, filter=True, sortable=True)
gridOptions = gb.build()
AgGrid(rec_df, gridOptions=gridOptions, enable_enterprise_modules=False, theme='material')